DROP TABLE IF EXISTS CleanerViewTracker;
DROP TABLE IF EXISTS Shortlist;
DROP TABLE IF EXISTS CleanerViews;
DROP TABLE IF EXISTS Services;
DROP TABLE IF EXISTS ServiceCategories;
DROP TABLE IF EXISTS Users;
DROP TABLE IF EXISTS UserProfiles;

DROP PROCEDURE IF EXISTS ViewCleanerProfile;


CREATE TABLE UserProfiles (
    role VARCHAR(50) NOT NULL PRIMARY KEY,
    description VARCHAR(100) NOT NULL,
    status ENUM('active', 'suspended') NOT NULL DEFAULT 'active'
);

CREATE TABLE Users (
    username VARCHAR(100) NOT NULL PRIMARY KEY,
    password VARCHAR(100) NOT NULL,
    status ENUM('active', 'suspended') NOT NULL DEFAULT 'active',
    role VARCHAR(50),  -- Can be null until it is set by admin or if role is deleted
    
    CONSTRAINT role_FK FOREIGN KEY (role) REFERENCES UserProfiles(role) ON UPDATE CASCADE ON DELETE SET NULL
);

CREATE TABLE ServiceCategories (
	category VARCHAR(50) NOT NULL PRIMARY KEY,
    description VARCHAR(100) NOT NULL, 
    status ENUM('active', 'suspended') NOT NULL DEFAULT 'active'
);

CREATE TABLE Services (
    cleaner_username VARCHAR(100) NOT NULL,
    category VARCHAR(50) NOT NULL,
    service VARCHAR(100) NOT NULL,
    status ENUM('active', 'suspended') NOT NULL DEFAULT 'active',
    
    PRIMARY KEY (cleaner_username, category, service),

    FOREIGN KEY (category) REFERENCES ServiceCategories(category) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (cleaner_username) REFERENCES Users(username) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE CleanerViews (
    username VARCHAR(100) NOT NULL PRIMARY KEY, 
    views INT NOT NULL DEFAULT 0,

    FOREIGN KEY (username) REFERENCES Users(username) ON UPDATE CASCADE ON DELETE CASCADE

);

CREATE TABLE Shortlist (
    homeowner_username VARCHAR(100) NOT NULL,
    cleaner_username VARCHAR(100) NOT NULL,
    category VARCHAR(50) NOT NULL,
    service VARCHAR(100) NOT NULL,
    
    PRIMARY KEY (homeowner_username, cleaner_username, category, service),

    FOREIGN KEY (homeowner_username) REFERENCES Users(username) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (cleaner_username, category, service) REFERENCES Services(cleaner_username, category, service) ON UPDATE CASCADE ON DELETE CASCADE
);


CREATE TABLE CleanerViewTracker (
    homeowner_username VARCHAR(100) NOT NULL,
    cleaner_username VARCHAR(100) NOT NULL,
    
    PRIMARY KEY (homeowner_username, cleaner_username),
    
    FOREIGN KEY (homeowner_username) REFERENCES Users(username) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (cleaner_username) REFERENCES Users(username) ON UPDATE CASCADE ON DELETE CASCADE
);




DELIMITER $$

-- If a service category is suspended all services under that category is suspended 
CREATE TRIGGER suspend_services_after_category_update
AFTER UPDATE ON ServiceCategories
FOR EACH ROW
BEGIN
    IF NEW.status = 'suspended' THEN
        UPDATE Services
        SET status = 'suspended'
        WHERE category = NEW.category;
    END IF;
END$$

-- Auto create a view cleaner row when a cleaner is created 
CREATE TRIGGER insert_into_cleanerviews_after_user_insert
AFTER INSERT ON Users
FOR EACH ROW
BEGIN
    IF NEW.role = 'cleaner' THEN
        INSERT INTO CleanerViews (username) VALUES (NEW.username);
    END IF;
END$$

DELIMITER ;

DELIMITER $$

CREATE PROCEDURE ViewCleanerProfile(
    IN p_homeowner_username VARCHAR(100),
    IN p_cleaner_username VARCHAR(100)
)
BEGIN
    IF NOT EXISTS (
        SELECT 1
        FROM CleanerViewTracker
        WHERE homeowner_username = p_homeowner_username
          AND cleaner_username = p_cleaner_username
    ) THEN
        INSERT INTO CleanerViewTracker (homeowner_username, cleaner_username)
        VALUES (p_homeowner_username, p_cleaner_username);

        UPDATE CleanerViews
        SET views = views + 1
        WHERE username = p_cleaner_username;
    END IF;
END$$

DELIMITER ;


-- Insert test users
INSERT INTO UserProfiles (role, description) VALUES ('admin', 'Manages Users accounts');
INSERT INTO UserProfiles (role, description) VALUES ('cleaner', 'Provides cleaning services on the app');
INSERT INTO UserProfiles (role, description) VALUES ('home owner', 'Purchases services offered by cleaners');
INSERT INTO UserProfiles (role, description) VALUES ('platform management', 'Generates reports for the company');
INSERT INTO users (username, password, role) VALUES ('admin1', '123', 'admin');
INSERT INTO users (username, password, role) VALUES ('admin2', '123', 'admin');
INSERT INTO users (username, password) VALUES ('admin3', '123');
INSERT INTO users (username, password, role) VALUES ('cleaner1', '123', 'cleaner');
INSERT INTO users (username, password) VALUES ('cleaner2', '123');
INSERT INTO users (username, password, role) VALUES ('ho1', '123', 'home owner');
INSERT INTO users (username, password, role) VALUES ('pm1', '123', 'platform management');



