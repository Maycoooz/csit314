DROP TABLE IF EXISTS Transactions;
DROP TABLE IF EXISTS CleanerViewTracker;
DROP TABLE IF EXISTS Shortlist;
DROP TABLE IF EXISTS CleanerViews;
DROP TABLE IF EXISTS Services;
DROP TABLE IF EXISTS ServiceCategories;
DROP TABLE IF EXISTS Users;
DROP TABLE IF EXISTS UserProfiles;

DROP PROCEDURE IF EXISTS ViewCleanerProfile;

-- UserProfiles table
CREATE TABLE UserProfiles (
    role VARCHAR(50) NOT NULL PRIMARY KEY,
    description VARCHAR(100) NOT NULL,
    status ENUM('active', 'suspended') NOT NULL DEFAULT 'active'
);

-- Users table
CREATE TABLE Users (
    username VARCHAR(100) NOT NULL PRIMARY KEY,
    password VARCHAR(100) NOT NULL,
    status ENUM('active', 'suspended') NOT NULL DEFAULT 'active',
    role VARCHAR(50) DEFAULT NULL,

    CONSTRAINT role_FK FOREIGN KEY (role) REFERENCES UserProfiles(role) ON UPDATE CASCADE ON DELETE SET NULL
);

-- ServiceCategories table
CREATE TABLE ServiceCategories (
    category VARCHAR(50) NOT NULL PRIMARY KEY,
    description VARCHAR(150) NOT NULL,
    status ENUM('active', 'suspended') NOT NULL DEFAULT 'active'
);

-- Services table with service_id
CREATE TABLE Services (
    service_id INT AUTO_INCREMENT PRIMARY KEY,
    cleaner_username VARCHAR(100) NOT NULL,
    category VARCHAR(50) NOT NULL,
    service VARCHAR(100) NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    status ENUM('active', 'suspended') NOT NULL DEFAULT 'active',

    FOREIGN KEY (category) REFERENCES ServiceCategories(category) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (cleaner_username) REFERENCES Users(username) ON UPDATE CASCADE ON DELETE CASCADE,

    UNIQUE (cleaner_username, category, service)  
);

-- CleanerViews table
CREATE TABLE CleanerViews (
    username VARCHAR(100) NOT NULL PRIMARY KEY, 
    views INT NOT NULL DEFAULT 0,

    FOREIGN KEY (username) REFERENCES Users(username) ON UPDATE CASCADE ON DELETE CASCADE
);

-- Shortlist table
CREATE TABLE Shortlist (
    homeowner_username VARCHAR(100) NOT NULL,
    service_id INT NOT NULL,
    
    PRIMARY KEY (homeowner_username, service_id),

    FOREIGN KEY (homeowner_username) REFERENCES Users(username) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (service_id) REFERENCES Services(service_id) ON UPDATE CASCADE ON DELETE CASCADE
);

-- CleanerViewTracker table
CREATE TABLE CleanerViewTracker (
    homeowner_username VARCHAR(100) NOT NULL,
    cleaner_username VARCHAR(100) NOT NULL,
    
    PRIMARY KEY (homeowner_username, cleaner_username),
    
    FOREIGN KEY (homeowner_username) REFERENCES Users(username) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (cleaner_username) REFERENCES Users(username) ON UPDATE CASCADE ON DELETE CASCADE
);

-- Transactions table
CREATE TABLE Transactions (
	transaction_id int AUTO_INCREMENT PRIMARY KEY,
	homeowner_username VARCHAR(100) NOT NULL,
    cleaner_username VARCHAR(100) NOT NULL,
    service_id INT NOT NULL,
    date DATE NOT NULL DEFAULT (CURRENT_DATE),
    
    FOREIGN KEY (homeowner_username) REFERENCES Users(username) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (cleaner_username) REFERENCES Users(username) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (service_id) REFERENCES Services(service_id) ON UPDATE CASCADE ON DELETE CASCADE
);

-- TRIGGERS and PROCEDURES
DELIMITER $$

CREATE TRIGGER suspend_services_after_category_update
AFTER UPDATE ON ServiceCategories
FOR EACH ROW
BEGIN
    IF NEW.status = 'suspended' THEN
        UPDATE Services
        SET status = 'suspended'
        WHERE category = NEW.category;
    END IF;
END$$

CREATE TRIGGER insert_into_cleanerviews_after_user_insert
AFTER INSERT ON Users
FOR EACH ROW
BEGIN
    IF NEW.role = 'cleaner' THEN
        INSERT INTO CleanerViews (username) VALUES (NEW.username);
    END IF;
END$$

DELIMITER ;

DELIMITER $$

CREATE PROCEDURE ViewCleanerProfile(
    IN p_homeowner_username VARCHAR(100),
    IN p_cleaner_username VARCHAR(100)
)
BEGIN
    IF NOT EXISTS (
        SELECT 1
        FROM CleanerViewTracker
        WHERE homeowner_username = p_homeowner_username
          AND cleaner_username = p_cleaner_username
    ) THEN
        INSERT INTO CleanerViewTracker (homeowner_username, cleaner_username)
        VALUES (p_homeowner_username, p_cleaner_username);

        UPDATE CleanerViews
        SET views = views + 1
        WHERE username = p_cleaner_username;
    END IF;
END$$

DELIMITER ;

INSERT INTO UserProfiles (role, description) VALUES 
('admin', 'Manages users accounts & user profiles'),
('cleaner', 'Provides cleaning services on the app'),
('home owner', 'Purchases services offered by cleaners'),
('platform management', 'Manage service categories & Generate reports');

/*
INSERT INTO Users (username, password, role) VALUES 
('admin1', '123', 'admin'),
('admin2', '123', 'admin'),
('admin3', '123', NULL),
('cleaner1', '123', 'cleaner'),
('cleaner2', '123', NULL),
('cleaner3', '123', 'cleaner'),
('cleaner4', '123', 'cleaner'),
('cleaner5', '123', 'cleaner'),
('ho1', '123', 'home owner'),
('ho2', '123', 'home owner'),
('ho3', '123', 'home owner'),
('pm1', '123', 'platform management'),
('pm2', '123', 'platform management');
*/

INSERT INTO ServiceCategories (category, description) VALUES 
('Home Cleaning', 'General daily house cleaning services'),
('Outdoor Cleaning', 'Outdoor cleaning covers patios, gardens, roofs, etc.'),
('Vehicular Cleaning', 'Cleaning of vehicles'),
('Deep Cleaning', 'Deep Cleaning covers full-house cleaning, hard to reach areas, typically cleaned quarterly to yearly');

/*
INSERT INTO Services (cleaner_username, category, service, price) VALUES 
('cleaner1', 'Home Cleaning', 'Mopping floor of house', 25.5),
('cleaner1', 'Home Cleaning', 'Sweeping floor of house', 25.5),
('cleaner1', 'Outdoor Cleaning', 'Powerwashing driveway', 50.0),
('cleaner1', 'Deep Cleaning', 'Fungal Removal', 150.6),
('cleaner3', 'Home Cleaning', 'Sweeping house floor', 35.5),
('cleaner3', 'Home Cleaning', 'Mopping floor', 15.5),
('cleaner4', 'Home Cleaning', 'Sweep house floor', 45.5);
*/

/*
INSERT INTO Transactions (homeowner_username, cleaner_username, service_id, date) VALUES 
('ho1', 'cleaner1', 1, '2025-01-10'),
('ho1', 'cleaner1', 4, '2025-01-10'),
('ho1', 'cleaner1', 2, '2025-01-11'),
('ho1', 'cleaner1', 2, '2025-01-12'),
('ho1', 'cleaner1', 1, '2025-02-15'),
('ho1', 'cleaner1', 1, '2025-03-20'),
('ho1', 'cleaner1', 2, '2025-01-10'),
('ho1', 'cleaner1', 2, '2025-02-15'),
('ho1', 'cleaner1', 2, '2025-03-20');

INSERT INTO Transactions (homeowner_username, cleaner_username, service_id, date) VALUES 
('ho2', 'cleaner1', 1, '2025-01-10'),
('ho2', 'cleaner1', 4, '2025-01-10'),
('ho2', 'cleaner1', 2, '2025-01-11'),
('ho2', 'cleaner1', 3, '2025-01-12'),
('ho2', 'cleaner1', 1, '2025-02-15'),
('ho2', 'cleaner1', 1, '2025-04-20'),
('ho2', 'cleaner3', 5, '2025-01-10');

INSERT INTO Transactions (homeowner_username, cleaner_username, service_id, date) VALUES 
('ho3', 'cleaner1', 1, '2025-01-10'),
('ho3', 'cleaner1', 1, '2025-02-15'),
('ho3', 'cleaner4', 7, '2025-04-20'),
('ho3', 'cleaner3', 5, '2025-01-10');
*/

-- Test user with encrypted password
INSERT INTO users (username, password, status, role)
VALUES ('tester', '$2b$12$s8oaHU/Dy/dwaSGdh1mMrunt1CnpfNQkRwbq7gXvW755Ro853GA4a', 'active', 'admin');